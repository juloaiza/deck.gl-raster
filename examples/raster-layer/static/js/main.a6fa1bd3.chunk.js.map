{"version":3,"sources":["../../../src/deckgl/images.js","../../../src/deckgl/raster-layer/raster-layer-fragment.js","../../../src/deckgl/raster-layer/raster-layer.js","../../../src/webgl/texture/combine-bands.js","../../../src/webgl/spectral-indices/normalized-difference.js","../../../src/webgl/pansharpen/pansharpen-brovey.js","../../../src/webgl/color/colormap.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_TEXTURE_PARAMETERS","GL","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","loadTexture","gl","imageData","Texture2D","parameters","defaultProps","BitmapLayer","modules","type","value","compare","images","moduleProps","RasterLayer","this","context","programManager","ProgramManager","getDefaultProgramManager","fsStr1","fsStr2","_hookFunctions","includes","addShaderHook","setState","uniforms","state","model","props","desaturate","transparentColor","tintColor","Object","keys","length","values","every","item","setUniforms","assign","map","x","slice","updateModuleSettings","draw","fs","project32","picking","oldProps","changeFlags","extensionsChanged","delete","_getModel","getAttributeManager","invalidateAll","updateImages","attributeManager","bounds","oldMesh","mesh","_createMesh","key","setVertexCount","vertexCount","invalidate","newImages","imagesDirty","changedKeys","push","isEqual","Array","isArray","loadImages","image","layerName","name","getUniforms","opts","imageBands","bitmapTexture_r","bitmapTexture_g","bitmapTexture_b","bitmapTexture_a","inject","imagePan","panWeight","bitmapTexture_pan","imageColormap","bitmapTexture_colormap","initialViewState","longitude","latitude","zoom","pitch","bearing","MOSAIC_URL","colorStr","nBands","colorBands","landsatUrl","options","bands","url","y","z","bandsArray","params","join","color_ops","searchParams","URLSearchParams","baseUrl","toString","vibranceEffect","PostProcessEffect","vibrance","amount","App","layers","TileLayer","minZoom","maxZoom","tileSize","getTileData","renderSubLayers","tile","bbox","west","south","east","north","data","effects","controller","React","Component","a","landsatBands","usePan","combineBands","normalizedDifference","bandsUrls","band","loadImage","panUrl","pansharpenBrovey","colormap","Promise","all","load","ImageLoader","format","height","RGB","LUMINANCE","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6fa1bd3.chunk.js","sourcesContent":["import { Texture2D } from \"@luma.gl/core\";\nimport GL from \"@luma.gl/constants\";\nimport isEqual from \"lodash.isequal\";\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n};\n\nexport function loadImages({ gl, images, props, oldProps }) {\n  // Change to `true` if we need to setState with a new `images` object\n  let imagesDirty = false;\n\n  // If there are any removed keys, which previously existed in oldProps and\n  // this.state.images but no longer exist in props, remove from the images\n  // object\n  if (oldProps && oldProps.images) {\n    for (const key in oldProps.images) {\n      if (props.images && !(key in props.images) && key in images) {\n        delete images[key];\n        imagesDirty = true;\n      }\n    }\n  }\n\n  // Check if any keys of props.images have changed\n  const changedKeys = [];\n  for (const key in props.images) {\n    // If oldProps.images didn't exist or it existed and this key didn't exist\n    if (!oldProps.images || (oldProps.images && !(key in oldProps.images))) {\n      changedKeys.push(key);\n      continue;\n    }\n\n    // Deep compare when the key previously existed to see if it changed\n    if (!isEqual(props.images[key], oldProps.images[key])) {\n      changedKeys.push(key);\n    }\n  }\n\n  for (const key of changedKeys) {\n    const imageData = props.images[key];\n    if (!imageData) {\n      continue;\n    }\n\n    if (Array.isArray(imageData)) {\n      images[key] = imageData.map((x) => loadTexture(gl, x));\n    } else {\n      images[key] = loadTexture(gl, imageData);\n    }\n    imagesDirty = true;\n  }\n\n  if (imagesDirty) {\n    return images;\n  }\n\n  return null;\n}\n\nfunction loadTexture(gl, imageData) {\n  if (imageData instanceof Texture2D) {\n    return imageData;\n  } else if (imageData) {\n    return new Texture2D(gl, {\n      parameters: DEFAULT_TEXTURE_PARAMETERS,\n      ...imageData,\n    });\n  }\n}\n","export default `\n#define SHADER_NAME raster-layer-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nvarying vec2 vTexCoord;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  return mix(transparentColor, vec4(color, 1.0), alpha);\n}\n\nvoid main(void) {\n  vec4 image;\n  DECKGL_CREATE_COLOR(image, vTexCoord);\n\n  DECKGL_MUTATE_COLOR(image, vTexCoord);\n\n  gl_FragColor = apply_opacity(color_tint(color_desaturate(image.rgb)), opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","import { BitmapLayer } from \"@deck.gl/layers\";\nimport { project32, picking } from \"@deck.gl/core\";\nimport { ProgramManager } from \"@luma.gl/engine\";\n\nimport { loadImages } from \"../images\";\nimport fs from \"./raster-layer-fragment\";\n\nconst defaultProps = {\n  ...BitmapLayer.defaultProps,\n  modules: { type: \"array\", value: [], compare: true },\n  images: { type: \"object\", value: {}, compare: true },\n  moduleProps: { type: \"object\", value: {}, compare: true },\n};\n\nexport default class RasterLayer extends BitmapLayer {\n  initializeState() {\n    const { gl } = this.context;\n    const programManager = ProgramManager.getDefaultProgramManager(gl);\n\n    const fsStr1 = \"fs:DECKGL_MUTATE_COLOR(inout vec4 image, in vec2 coord)\";\n    const fsStr2 = \"fs:DECKGL_CREATE_COLOR(inout vec4 image, in vec2 coord)\";\n\n    // Only initialize shader hook functions _once globally_\n    // Since the program manager is shared across all layers, but many layers\n    // might be created, this solves the performance issue of always adding new\n    // hook functions. See #22\n    if (!programManager._hookFunctions.includes(fsStr1)) {\n      programManager.addShaderHook(fsStr1);\n    }\n    if (!programManager._hookFunctions.includes(fsStr2)) {\n      programManager.addShaderHook(fsStr2);\n    }\n\n    // images is a mapping from keys to Texture2D objects. The keys should match\n    // names of uniforms in shader modules\n    this.setState({ images: {} });\n\n    super.initializeState();\n  }\n\n  draw({ uniforms }) {\n    const { model, images } = this.state;\n    const { desaturate, transparentColor, tintColor, moduleProps } = this.props;\n\n    // Render the image\n    if (\n      !model ||\n      !images ||\n      Object.keys(images).length === 0 ||\n      !Object.values(images).every((item) => item)\n    ) {\n      return;\n    }\n\n    model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          desaturate,\n          transparentColor: transparentColor.map((x) => x / 255),\n          tintColor: tintColor.slice(0, 3).map((x) => x / 255),\n        })\n      )\n      .updateModuleSettings({\n        ...moduleProps,\n        ...images,\n      })\n      .draw();\n  }\n\n  getShaders() {\n    const { modules } = this.props;\n    return {\n      ...super.getShaders(),\n      ...{\n        fs,\n        modules: [project32, picking, ...modules],\n      },\n    };\n  }\n\n  updateState({ props, oldProps, changeFlags }) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const { gl } = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({ model: this._getModel(gl) });\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props && props.images) {\n      this.updateImages({ props, oldProps });\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({ mesh });\n    }\n  }\n\n  updateImages({ props, oldProps }) {\n    const { images } = this.state;\n    const { gl } = this.context;\n\n    const newImages = loadImages({ gl, images, props, oldProps });\n    if (newImages) {\n      this.setState({ images: newImages });\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.images) {\n      for (const image of Object.values(this.state.images)) {\n        if (Array.isArray(image)) {\n          image.map((x) => x.delete());\n        } else {\n          image.delete();\n        }\n      }\n    }\n  }\n}\n\nRasterLayer.defaultProps = defaultProps;\nRasterLayer.layerName = \"RasterLayer\";\n","function getUniforms(opts = {}) {\n  const { imageBands } = opts;\n  if (!imageBands || imageBands.length === 0) {\n    return;\n  }\n\n  const [\n    bitmapTexture_r,\n    bitmapTexture_g,\n    bitmapTexture_b,\n    bitmapTexture_a,\n  ] = imageBands;\n\n  return {\n    bitmapTexture_r,\n    bitmapTexture_g,\n    bitmapTexture_b,\n    bitmapTexture_a,\n  };\n}\n\nconst fs = `\\\nuniform sampler2D bitmapTexture_r;\nuniform sampler2D bitmapTexture_g;\nuniform sampler2D bitmapTexture_b;\nuniform sampler2D bitmapTexture_a;\n`;\n\nexport default {\n  name: \"combine-bands\",\n  fs,\n  getUniforms,\n  inject: {\n    \"fs:DECKGL_CREATE_COLOR\": `\n    float r_band = texture2D(bitmapTexture_r, coord).r;\n    float g_band = texture2D(bitmapTexture_g, coord).r;\n    float b_band = texture2D(bitmapTexture_b, coord).r;\n    float a_band = texture2D(bitmapTexture_a, coord).r;\n\n    image = vec4(r_band, g_band, b_band, a_band);\n    `,\n  },\n};\n","const fs = `\\\n// Calculate standard normalized difference\nfloat normalized_difference_calc(vec4 image) {\n  return ((image.r - image.g) / (image.r + image.g));\n}\n`;\n\nexport default {\n  name: \"normalized_difference\",\n  fs,\n  inject: {\n    \"fs:DECKGL_MUTATE_COLOR\": `\n    image = vec4(normalized_difference_calc(image), 0., 0., 0.);\n    `,\n  },\n};\n","function getUniforms(opts = {}) {\n  const { imagePan, panWeight = 0.2 } = opts;\n  \n  if (!imagePan) {\n    return;\n  }\n  \n  return {\n    bitmapTexture_pan: imagePan,\n    panWeight,\n  };\n}\n\nconst fs = `\\\nuniform sampler2D bitmapTexture_pan;\nuniform float panWeight;\n\n// calculate pansharpen ratio\nfloat pansharpen_brovey_ratio(vec4 rgb, float pan, float weight) {\n    return pan / ((rgb.r + rgb.g + rgb.b * weight) / (2. + weight));\n}\n\n// Brovey Method: Each resampled, multispectral pixel is\n// multiplied by the ratio of the corresponding\n// panchromatic pixel intensity to the sum of all the\n// multispectral intensities.\n// Original code from https://github.com/mapbox/rio-pansharpen\nvec4 pansharpen_brovey_calc(vec4 rgb, float pan, float weight) {\n    float ratio = pansharpen_brovey_ratio(rgb, pan, weight);\n    vec4 alteredRGB = ratio * rgb;\n    return clamp(alteredRGB, 0., 1.);\n}\n`;\n\nexport default {\n  name: \"pansharpen_brovey\",\n  fs,\n  getUniforms,\n  inject: {\n    \"fs:DECKGL_MUTATE_COLOR\": `\n    float pan_band = texture2D(bitmapTexture_pan, coord).r;\n    image = pansharpen_brovey_calc(image, pan_band, panWeight);\n    `,\n  },\n};\n","function getUniforms(opts = {}) {\n  const { imageColormap } = opts;\n\n  if (!imageColormap) {\n    return;\n  }\n\n  return {\n    bitmapTexture_colormap: imageColormap,\n  };\n}\n\nconst fs = `\\\nuniform sampler2D bitmapTexture_colormap;\n\n// Apply colormap texture given value\n// Since the texture only varies in the x direction, setting v to 0.5 as a\n// constant is fine\n// Assumes the input range of value is -1 to 1\nvec4 colormap_apply(sampler2D colormap, vec4 image) {\n  vec2 uv = vec2(0.5 * image.r + 0.5, 0.5);\n  return texture2D(colormap, uv);\n}\n`;\n\nexport default {\n  name: \"colormap\",\n  fs,\n  getUniforms,\n  inject: {\n    \"fs:DECKGL_MUTATE_COLOR\": `\n    image = colormap_apply(bitmapTexture_colormap, image);\n    `,\n  },\n};\n","import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\n\nimport { PostProcessEffect } from \"@deck.gl/core\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\n\nimport {\n  RasterLayer,\n  combineBands,\n  pansharpenBrovey,\n  modifiedSoilAdjustedVegetationIndex,\n  normalizedDifference,\n  colormap,\n} from \"@kylebarron/deck.gl-raster\";\n\nimport { load } from \"@loaders.gl/core\";\nimport { ImageLoader } from \"@loaders.gl/images\";\n\nimport { vibrance } from \"@luma.gl/shadertools\";\nimport GL from \"@luma.gl/constants\";\n\nconst initialViewState = {\n  longitude: -112.1861,\n  latitude: 36.1284,\n  zoom: 11.5,\n  pitch: 0,\n  bearing: 0,\n};\n\nconst MOSAIC_URL = \"dynamodb://us-west-2/landsat8-2019-spring\";\n\nfunction colorStr(nBands) {\n  const colorBands = \"RGB\".slice(0, nBands);\n  let colorStr = `gamma ${colorBands} 3.5, sigmoidal ${colorBands} 15 0.35`;\n\n  if (nBands === 3) {\n    colorStr += \", saturation 1.7\";\n  }\n  return colorStr;\n}\n\nfunction landsatUrl(options) {\n  const { bands, url, x, y, z } = options;\n  const bandsArray = Array.isArray(bands) ? bands : [bands];\n  const params = {\n    url,\n    bands: bandsArray.join(\",\"),\n    color_ops: colorStr(bandsArray.length),\n  };\n  const searchParams = new URLSearchParams(params);\n  let baseUrl = `https://us-west-2-lambda.kylebarron.dev/landsat/tiles/${z}/${x}/${y}.jpg?`;\n  baseUrl += searchParams.toString();\n  return baseUrl;\n}\n\nconst vibranceEffect = new PostProcessEffect(vibrance, {\n  amount: 1,\n});\n\nexport default class App extends React.Component {\n  render() {\n    const layers = [\n      new TileLayer({\n        minZoom: 0,\n        maxZoom: 12,\n        tileSize: 256,\n        getTileData,\n        renderSubLayers: (props) => {\n          const {\n            bbox: { west, south, east, north },\n          } = props.tile;\n          const { modules, images, ...moduleProps } = props.data;\n          return new RasterLayer(props, {\n            images,\n            modules,\n            moduleProps,\n            bounds: [west, south, east, north],\n          });\n        },\n      }),\n    ];\n\n    return (\n      <DeckGL\n        initialViewState={initialViewState}\n        layers={layers}\n        effects={[vibranceEffect]}\n        controller\n      />\n    );\n  }\n}\n\nasync function getTileData({ x, y, z }) {\n  // BAND CONFIGURATION\n  // In a real application the following would come from props\n  const landsatBands = [5, 4];\n  const usePan =\n    z >= 12 &&\n    landsatBands[0] === 4 &&\n    landsatBands[1] === 3 &&\n    landsatBands[2] === 2;\n  const useColormap = true;\n  const colormapUrl =\n    \"https://cdn.jsdelivr.net/gh/kylebarron/deck.gl-raster/assets/colormaps/cfastie.png\";\n  const modules = [combineBands, normalizedDifference];\n\n  const bandsUrls = landsatBands.map((band) =>\n    landsatUrl({ x, y, z, bands: band, url: MOSAIC_URL })\n  );\n  const imageBands = bandsUrls.map((url) => loadImage(url));\n\n  let imagePan;\n  if (usePan) {\n    const panUrl = landsatUrl({ x, y, z, bands: 8, url: MOSAIC_URL });\n    imagePan = loadImage(panUrl);\n    modules.push(pansharpenBrovey);\n  }\n\n  // Load colormap\n  // Only load if landsatBandCombination is not RGB\n  let imageColormap;\n  if (useColormap) {\n    imageColormap = loadImage(colormapUrl);\n    modules.push(colormap);\n  }\n\n  // Await all images together\n  await Promise.all([imagePan, imageBands, imageColormap]);\n\n  const images = {\n    imageBands: await Promise.all(imageBands),\n    imageColormap: await imageColormap,\n    imagePan: await imagePan,\n  };\n\n  return {\n    images,\n    modules,\n  };\n}\n\nexport async function loadImage(url) {\n  const image = await load(url, ImageLoader);\n  return {\n    data: image,\n    format: image && image.height === 10 ? GL.RGB : GL.LUMINANCE,\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}