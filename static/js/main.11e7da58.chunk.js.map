{"version":3,"sources":["bands-bitmap-layer/bands-bitmap-layer.js","bands-bitmap-layer/bands-bitmap-layer-fragment.js","bands-bitmap-layer/bands-bitmap-layer-pan-fragment.js","bands-bitmap-layer/bands-bitmap-layer-pan.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_TEXTURE_PARAMETERS","GL","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","BandsBitmapLayer","opts","uniforms","this","state","bitmapTexture_r","bitmapTexture_g","bitmapTexture_b","model","props","desaturate","transparentColor","tintColor","setUniforms","Object","assign","map","x","slice","draw","delete","fs","oldProps","changeFlags","extensionsChanged","gl","context","setState","_getModel","getAttributeManager","invalidateAll","image_r","loadTexture","image_g","image_b","attributeManager","bounds","invalidate","image","Texture2D","HTMLVideoElement","bitmapTexture","width","height","parameters","mipmaps","data","BitmapLayer","defaultProps","type","value","async","compare","min","max","layerName","bitmapTexture_pan","panWeight","image_pan","initialViewState","longitude","latitude","zoom","pitch","bearing","MOSAIC_URL","colorStr","nBands","colorBands","landsatUrl","options","bands","url","y","z","bandsArray","Array","isArray","params","join","color_ops","length","searchParams","URLSearchParams","baseUrl","toString","vibranceEffect","PostProcessEffect","vibrance","amount","App","layers","TileLayer","minZoom","maxZoom","getTileData","a","pan","urls","push","loadImageArray","index","images","textures","format","RGB","renderSubLayers","tile","bbox","west","south","east","north","then","result","PanBandsBitmapLayer","onWebGLInitialized","effects","controller","mapStyle","mapOptions","hash","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11e7da58.chunk.js","sourcesContent":["import GL from \"@luma.gl/constants\";\nimport { BitmapLayer } from \"@deck.gl/layers\";\nimport { Texture2D } from \"@luma.gl/core\";\n\nimport fs from \"./bands-bitmap-layer-fragment\";\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n};\n\nconst defaultProps = {\n  image_r: { type: \"object\", value: null, async: true },\n  image_g: { type: \"object\", value: null, async: true },\n  image_b: { type: \"object\", value: null, async: true },\n  bounds: { type: \"array\", value: [1, 0, 0, 1], compare: true },\n\n  desaturate: { type: \"number\", min: 0, max: 1, value: 0 },\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: { type: \"color\", value: [0, 0, 0, 0] },\n  tintColor: { type: \"color\", value: [255, 255, 255] },\n};\n\nexport default class BandsBitmapLayer extends BitmapLayer {\n  draw(opts) {\n    const { uniforms } = opts;\n    const {\n      bitmapTexture_r,\n      bitmapTexture_g,\n      bitmapTexture_b,\n      model,\n    } = this.state;\n    const { desaturate, transparentColor, tintColor } = this.props;\n\n    // // TODO fix zFighting\n    // Render the image\n    if (bitmapTexture_r && bitmapTexture_g && bitmapTexture_b && model) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture_r,\n            bitmapTexture_g,\n            bitmapTexture_b,\n            desaturate,\n            transparentColor: transparentColor.map((x) => x / 255),\n            tintColor: tintColor.slice(0, 3).map((x) => x / 255),\n          })\n        )\n        .draw();\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture_r) {\n      this.state.bitmapTexture_r.delete();\n    }\n    if (this.state.bitmapTexture_g) {\n      this.state.bitmapTexture_g.delete();\n    }\n    if (this.state.bitmapTexture_b) {\n      this.state.bitmapTexture_b.delete();\n    }\n  }\n\n  getShaders() {\n    // use object.assign to make sure we don't overwrite existing fields like `vs`, `modules`...\n    return Object.assign({}, super.getShaders(), {\n      fs,\n    });\n  }\n\n  updateState({ props, oldProps, changeFlags }) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const { gl } = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({ model: this._getModel(gl) });\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image_r !== oldProps.image_r) {\n      const bitmapTexture_r = this.loadTexture(props.image_r);\n      if (this.state.bitmapTexture_r) {\n        this.state.bitmapTexture_r.delete();\n      }\n      this.setState({ bitmapTexture_r });\n    }\n    if (props.image_g !== oldProps.image_g) {\n      const bitmapTexture_g = this.loadTexture(props.image_g);\n      if (this.state.bitmapTexture_g) {\n        this.state.bitmapTexture_g.delete();\n      }\n      this.setState({ bitmapTexture_g });\n    }\n    if (props.image_b !== oldProps.image_b) {\n      const bitmapTexture_b = this.loadTexture(props.image_b);\n      if (this.state.bitmapTexture_b) {\n        this.state.bitmapTexture_b.delete();\n      }\n      this.setState({ bitmapTexture_b });\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      attributeManager.invalidate(\"positions\");\n    }\n  }\n\n  loadTexture(image) {\n    const { gl } = this.context;\n\n    if (image instanceof Texture2D) {\n      return image;\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      return {\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false,\n        }),\n      };\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      return {\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n        }),\n      };\n    }\n  }\n}\n\nBandsBitmapLayer.defaultProps = defaultProps;\nBandsBitmapLayer.layerName = \"BandsBitmapLayer\";\n","export default `\n#define SHADER_NAME bands-bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D bitmapTexture_r;\nuniform sampler2D bitmapTexture_g;\nuniform sampler2D bitmapTexture_b;\n\nvarying vec2 vTexCoord;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  return mix(transparentColor, vec4(color, 1.0), alpha);\n}\n\nvoid main(void) {\n  float r_band = texture2D(bitmapTexture_r, vTexCoord).r;\n  float g_band = texture2D(bitmapTexture_g, vTexCoord).r;\n  float b_band = texture2D(bitmapTexture_b, vTexCoord).r;\n  vec4 image = vec4(r_band, g_band, b_band, 1.);\n\n  gl_FragColor = apply_opacity(color_tint(color_desaturate(image.rgb)), image.a * opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","export default `\n#define SHADER_NAME bands-bitmap-layer-pan-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D bitmapTexture_r;\nuniform sampler2D bitmapTexture_g;\nuniform sampler2D bitmapTexture_b;\nuniform sampler2D bitmapTexture_pan;\n\nvarying vec2 vTexCoord;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\nuniform float panWeight;\n\n\n// calculate pansharpen ratio\nfloat pansharpen_ratio(vec3 rgb, float pan, float weight) {\n    return pan / ((rgb.r + rgb.g + rgb.b * weight) / (2. + weight));\n}\n\n// Brovey Method: Each resampled, multispectral pixel is\n// multiplied by the ratio of the corresponding\n// panchromatic pixel intensity to the sum of all the\n// multispectral intensities.\n// Original code from https://github.com/mapbox/rio-pansharpen\nvec3 pansharpen(vec3 rgb, float pan, float weight) {\n    float ratio = pansharpen_ratio(rgb, pan, weight);\n    vec3 alteredRGB = ratio * rgb;\n    return clamp(alteredRGB, 0., 1.);\n}\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  return mix(transparentColor, vec4(color, 1.0), alpha);\n}\n\nvoid main(void) {\n  float r_band = texture2D(bitmapTexture_r, vTexCoord).r;\n  float g_band = texture2D(bitmapTexture_g, vTexCoord).r;\n  float b_band = texture2D(bitmapTexture_b, vTexCoord).r;\n  float pan_band = texture2D(bitmapTexture_pan, vTexCoord).r;\n  vec3 image = vec3(r_band, g_band, b_band);\n\n  vec3 pansharpenedImage = pansharpen(image, pan_band, panWeight);\n\n  gl_FragColor = apply_opacity(color_tint(color_desaturate(pansharpenedImage)), opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","import GL from \"@luma.gl/constants\";\nimport { BitmapLayer } from \"@deck.gl/layers\";\nimport { Texture2D } from \"@luma.gl/core\";\n\nimport fs from \"./bands-bitmap-layer-pan-fragment\";\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n};\n\nconst defaultProps = {\n  image_r: { type: \"object\", value: null, async: true },\n  image_g: { type: \"object\", value: null, async: true },\n  image_b: { type: \"object\", value: null, async: true },\n  image_pan: { type: \"object\", value: null, async: true },\n  bounds: { type: \"array\", value: [1, 0, 0, 1], compare: true },\n\n  desaturate: { type: \"number\", min: 0, max: 1, value: 0 },\n  // Weight of blue band\n  panWeight: { type: \"number\", min: 0, max: 1, value: 0.2 },\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: { type: \"color\", value: [0, 0, 0, 0] },\n  tintColor: { type: \"color\", value: [255, 255, 255] },\n};\n\nexport default class BandsBitmapLayer extends BitmapLayer {\n  draw(opts) {\n    const { uniforms } = opts;\n    const {\n      bitmapTexture_r,\n      bitmapTexture_g,\n      bitmapTexture_b,\n      bitmapTexture_pan,\n      model,\n    } = this.state;\n    const { desaturate, transparentColor, tintColor, panWeight } = this.props;\n\n    // // TODO fix zFighting\n    // Render the image\n    if (\n      bitmapTexture_r &&\n      bitmapTexture_g &&\n      bitmapTexture_b &&\n      bitmapTexture_pan &&\n      model\n    ) {\n      model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            bitmapTexture_r,\n            bitmapTexture_g,\n            bitmapTexture_b,\n            bitmapTexture_pan,\n            panWeight,\n            desaturate,\n            transparentColor: transparentColor.map((x) => x / 255),\n            tintColor: tintColor.slice(0, 3).map((x) => x / 255),\n          })\n        )\n        .draw();\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    if (this.state.bitmapTexture_r) {\n      this.state.bitmapTexture_r.delete();\n    }\n    if (this.state.bitmapTexture_g) {\n      this.state.bitmapTexture_g.delete();\n    }\n    if (this.state.bitmapTexture_b) {\n      this.state.bitmapTexture_b.delete();\n    }\n    if (this.state.bitmapTexture_pan) {\n      this.state.bitmapTexture_pan.delete();\n    }\n  }\n\n  getShaders() {\n    // use object.assign to make sure we don't overwrite existing fields like `vs`, `modules`...\n    return Object.assign({}, super.getShaders(), {\n      fs,\n    });\n  }\n\n  updateState({ props, oldProps, changeFlags }) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const { gl } = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({ model: this._getModel(gl) });\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.image_r !== oldProps.image_r) {\n      const bitmapTexture_r = this.loadTexture(props.image_r);\n      if (this.state.bitmapTexture_r) {\n        this.state.bitmapTexture_r.delete();\n      }\n      this.setState({ bitmapTexture_r });\n    }\n    if (props.image_g !== oldProps.image_g) {\n      const bitmapTexture_g = this.loadTexture(props.image_g);\n      if (this.state.bitmapTexture_g) {\n        this.state.bitmapTexture_g.delete();\n      }\n      this.setState({ bitmapTexture_g });\n    }\n    if (props.image_b !== oldProps.image_b) {\n      const bitmapTexture_b = this.loadTexture(props.image_b);\n      if (this.state.bitmapTexture_b) {\n        this.state.bitmapTexture_b.delete();\n      }\n      this.setState({ bitmapTexture_b });\n    }\n    if (props.image_pan !== oldProps.image_pan) {\n      const bitmapTexture_pan = this.loadTexture(props.image_pan);\n      if (this.state.bitmapTexture_pan) {\n        this.state.bitmapTexture_pan.delete();\n      }\n      this.setState({ bitmapTexture_pan });\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      attributeManager.invalidate(\"positions\");\n    }\n  }\n\n  loadTexture(image) {\n    const { gl } = this.context;\n\n    if (image instanceof Texture2D) {\n      return image;\n    } else if (image instanceof HTMLVideoElement) {\n      // Initialize an empty texture while we wait for the video to load\n      return {\n        bitmapTexture: new Texture2D(gl, {\n          width: 1,\n          height: 1,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n          mipmaps: false,\n        }),\n      };\n    } else if (image) {\n      // Browser object: Image, ImageData, HTMLCanvasElement, ImageBitmap\n      return {\n        bitmapTexture: new Texture2D(gl, {\n          data: image,\n          parameters: DEFAULT_TEXTURE_PARAMETERS,\n        }),\n      };\n    }\n  }\n}\n\nBandsBitmapLayer.defaultProps = defaultProps;\nBandsBitmapLayer.layerName = \"BandsBitmapLayer\";\n","import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\n\nimport { PostProcessEffect } from \"@deck.gl/core\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\n\nimport { StaticMap } from \"react-map-gl\";\n\nimport {\n  BandsBitmapLayer,\n  PanBandsBitmapLayer,\n} from \"./bands-bitmap-layer\";\n\nimport { loadImageArray } from \"@loaders.gl/images\";\n\nimport { vibrance } from \"@luma.gl/shadertools\";\nimport { Texture2D } from \"@luma.gl/core\";\nimport GL from \"@luma.gl/constants\";\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,\n};\n\nconst initialViewState = {\n  longitude: -112.1861,\n  latitude: 36.1284,\n  zoom: 10.1,\n  pitch: 0,\n  bearing: 0,\n};\n\nconst MOSAIC_URL =\n  \"s3://kylebarron-landsat-test/mosaics/8113f57876010a63aadacef4eac6d010d10c9aafcf36a5ece064ea7f.json.gz\";\n\nfunction colorStr(nBands) {\n  const colorBands = \"RGB\".slice(0, nBands);\n  let colorStr = `gamma ${colorBands} 3.5, sigmoidal ${colorBands} 15 0.35`;\n\n  if (nBands === 3) {\n    colorStr += \", saturation 1.7\";\n  }\n  return colorStr;\n}\n\nfunction landsatUrl(options) {\n  const { bands, url, x, y, z } = options;\n  const bandsArray = Array.isArray(bands) ? bands : [bands];\n  const params = {\n    url,\n    bands: bandsArray.join(\",\"),\n    color_ops: colorStr(bandsArray.length),\n  };\n  const searchParams = new URLSearchParams(params);\n  let baseUrl = `https://landsat-lambda.kylebarron.dev/tiles/${z}/${x}/${y}@2x.jpg?`;\n  baseUrl += searchParams.toString();\n  return baseUrl;\n}\n\nconst vibranceEffect = new PostProcessEffect(vibrance, {\n  amount: 1,\n});\n\nexport default class App extends React.Component {\n  state = {\n    gl: null,\n  };\n\n  render() {\n    const layers = [\n      new TileLayer({\n        minZoom: 0,\n        maxZoom: 12,\n\n        getTileData: async ({ x, y, z }) => {\n          const { gl } = this.state;\n          const pan = z >= 12;\n\n          const urls = [\n            landsatUrl({ x, y, z, bands: 4, url: MOSAIC_URL }),\n            landsatUrl({ x, y, z, bands: 3, url: MOSAIC_URL }),\n            landsatUrl({ x, y, z, bands: 2, url: MOSAIC_URL }),\n          ];\n          if (pan) {\n            urls.push(landsatUrl({ x, y, z, bands: 8, url: MOSAIC_URL }));\n          }\n          const images = await loadImageArray(\n            urls.length,\n            ({ index }) => urls[index]\n          );\n\n          const textures = images.map((image) => {\n            return new Texture2D(gl, {\n              data: image,\n              parameters: DEFAULT_TEXTURE_PARAMETERS,\n              format: GL.RGB,\n            });\n          });\n          return textures;\n        },\n\n        renderSubLayers: (props) => {\n          const {\n            bbox: { west, south, east, north },\n            z,\n          } = props.tile;\n          const { data } = props;\n          const pan = z >= 12;\n\n          let image_r, image_g, image_b, image_pan;\n          if (Array.isArray(data)) {\n            image_r = data[0];\n            image_g = data[1];\n            image_b = data[2];\n            if (pan) {\n              image_pan = data[3];\n            }\n          } else if (data) {\n            image_r = data.then((result) => result && result[0]);\n            image_g = data.then((result) => result && result[1]);\n            image_b = data.then((result) => result && result[2]);\n            if (pan) {\n              image_pan = data.then((result) => result && result[3]);\n            }\n          }\n\n          if (pan) {\n            return new PanBandsBitmapLayer(props, {\n              data: null,\n              image_r,\n              image_g,\n              image_b,\n              image_pan,\n              bounds: [west, south, east, north],\n            });\n          }\n\n          return new BandsBitmapLayer(props, {\n            data: null,\n            image_r,\n            image_g,\n            image_b,\n            bounds: [west, south, east, north],\n          });\n        },\n      }),\n    ];\n\n    return (\n      <DeckGL\n        onWebGLInitialized={(gl) => this.setState({ gl })}\n        initialViewState={initialViewState}\n        layers={layers}\n        effects={[vibranceEffect]}\n        controller\n      >\n        <StaticMap\n          mapStyle=\"https://cdn.jsdelivr.net/gh/nst-guide/osm-liberty-topo@gh-pages/style.json\"\n          mapOptions={{ hash: true }}\n        />\n      </DeckGL>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}